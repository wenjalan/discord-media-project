{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Gallery","props","media","undefined","length","console","error","galleryRows","i","subset","slice","push","GalleryRow","items","className","itemDivs","index","forEach","item","GalleryItem","itemInfo","backgroundImageStyle","backgroundImage","url","onClick","window","open","style","App","channelName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","author","date","document","getElementById"],"mappings":"yJAIA,SAASA,EAAQC,GAEf,IAAMC,EAAQD,EAAMC,WAGNC,IAAVD,GAAwC,IAAjBA,EAAME,QAC/BC,QAAQC,MAAM,4BAQhB,IAJA,IAAIC,EAAc,GAITC,EAAI,EAAGA,EAAIN,EAAME,OAAQI,GADX,EACgC,CAErD,IAAIC,EAASP,EAAMQ,MAAMF,EAAGA,EAHP,GAMrBD,EAAYI,KAAK,cAACC,EAAD,CAAYC,MAAOJ,KAItC,OACE,qBAAKK,UAAU,UAAf,SACKP,IAMT,SAASK,EAAWX,GAElB,IAAMY,EAAQZ,EAAMY,MAGdE,EAAW,GAGbC,EAAQ,EAUZ,OATAH,EAAMI,SAAQ,SAACC,GAEbH,EAASJ,KACP,cAACQ,EAAD,CAAyBC,SAAUF,GAAjBF,IAEpBA,OAKA,qBAAKF,UAAU,cAAf,SAA8BC,IAKlC,SAASI,EAAYlB,GAEnB,IAAMmB,EAAWnB,EAAMmB,SAGnBC,EAAuB,CACzBC,gBAAiB,OAASF,EAASG,IAAM,KAI3C,OACE,qBACET,UAAU,eACVU,QAAS,kBAAMC,OAAOC,KAAKN,EAASG,IAAK,WACzCI,MAAON,IAoBEO,MAdf,SAAa3B,GACX,IAAM4B,EAAc5B,EAAM4B,YACpBhB,EAAQZ,EAAMY,MACpB,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,6BAAK,IAAMe,IACX,qBAAKf,UAAU,YACf,cAACd,EAAD,CAASE,MAAOW,UC3ETiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCkBdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKZ,YAAa,OAAQhB,MApBT,CACnB,CACE6B,OAAQ,OACRnB,IAAK,kHACLoB,KAAM,sBAER,CACED,OAAQ,OACRnB,IAAK,kHACLoB,KAAM,sBAER,CACED,OAAQ,OACRnB,IAAK,2IACLoB,KAAM,2BAQRC,SAASC,eAAe,SAM1Bf,K","file":"static/js/main.4f58f49d.chunk.js","sourcesContent":["import './App.css';\r\nimport React from 'react';\r\n\r\n// creates a Gallery of images given a list of media urls\r\nfunction Gallery(props) {\r\n  // get urls from props\r\n  const media = props.media;\r\n\r\n  // if no media urls were given, complain\r\n  if (media === undefined || media.length === 0) {\r\n    console.error(\"Error loading media URLS\");\r\n  }\r\n\r\n  // create the rows of items\r\n  let galleryRows = [];\r\n\r\n  // do sets of 3 or less links at a time\r\n  const maxItemsPerRow = 3;\r\n  for (let i = 0; i < media.length; i += maxItemsPerRow) {\r\n    // get a subset of the links\r\n    let subset = media.slice(i, i + maxItemsPerRow);\r\n\r\n    // create a new row for each set of links\r\n    galleryRows.push(<GalleryRow items={subset}/>);\r\n  }\r\n\r\n  // return the gallery with its rows as children\r\n  return (\r\n    <div className=\"Gallery\">\r\n        {galleryRows}\r\n    </div>\r\n  )\r\n}\r\n\r\n// creates a row in the gallery, given a list of background image urls\r\nfunction GalleryRow(props) {\r\n  // retrieve items\r\n  const items = props.items;\r\n\r\n  // create divs for each item\r\n  const itemDivs = [];\r\n\r\n  // for each URL\r\n  let index = 0;\r\n  items.forEach((item) => {\r\n    // create a new Gallery Item and add it to itemDivs\r\n    itemDivs.push(\r\n      <GalleryItem key={index} itemInfo={item}/>\r\n    );\r\n    index++;\r\n  });\r\n\r\n  // return the items in a row\r\n  return (\r\n    <div className=\"Gallery-row\">{itemDivs}</div>\r\n  );\r\n}\r\n\r\n// creates an item in a row of a gallery, given an item's information\r\nfunction GalleryItem(props) {\r\n  // get the media url of this item\r\n  const itemInfo = props.itemInfo;\r\n\r\n  // create a background style for this item\r\n  let backgroundImageStyle = {\r\n    backgroundImage: \"url(\" + itemInfo.url + \")\"\r\n  }\r\n\r\n  // return an item\r\n  return (\r\n    <div\r\n      className=\"Gallery-item\"\r\n      onClick={() => window.open(itemInfo.url, \"_blank\")}\r\n      style={backgroundImageStyle}>\r\n      {/*{itemInfo.author + \" at \" + itemInfo.date}*/}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App(props) {\r\n  const channelName = props.channelName;\r\n  const items = props.items;\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>{\"#\" + channelName}</h1>\r\n        <div className=\"Divider\"/>\r\n        <Gallery media={items}/>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n// example items\r\nconst exampleItems = [\r\n  {\r\n    author: \"@wen\",\r\n    url: \"https://media.discordapp.net/attachments/722365245653385268/842588587338104882/unknown.png?width=375&height=670\",\r\n    date: \"2021-5-13 11:13 PM\",\r\n  },\r\n  {\r\n    author: \"@frn\",\r\n    url: \"https://media.discordapp.net/attachments/722365245653385268/842595582032084992/unknown.png?width=514&height=670\",\r\n    date: \"2021-5-13 11:13 PM\",\r\n  },\r\n  {\r\n    author: \"@nuq\",\r\n    url: \"https://media.discordapp.net/attachments/722365245653385268/842588153722044446/cae3bde1de5e3627d16addafe2ba1ec1.png?width=377&height=670\",\r\n    date: \"2021-5-13 11:13 PM\",\r\n  },\r\n];\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App channelName={\"pics\"} items={exampleItems}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}